//original Harmonic
var OriginalHarmonic = function(order,s2_no_cld_shdw){
  // The dependent variable we are modeling.
  var dependent_NDVI = 'NDVI';
  
  // The number of cycles per year to model.
  var harmonics = order;
  // Make a list of harmonic frequencies to model.  
  // These also serve as band name suffixes.
  var harmonicFrequencies = ee.List.sequence(1, harmonics);
  // Function to get a sequence of band names for harmonic terms.
  var getNames = function(base, list) {
    return ee.List(list).map(function(i) { 
      return ee.String(base).cat(ee.Number(i).int());
    });
  };
  // Construct lists of names for the harmonic terms.
  var cosNames = getNames('cos_', harmonicFrequencies);
  var sinNames = getNames('sin_', harmonicFrequencies);
  // Independent variables.
  var independents = ee.List(['constant']).cat(cosNames).cat(sinNames);
  var addConstant = function(image) {
    return image.addBands(ee.Image(1));
  };
  
  // Function to add a time band.
  var addTime = function(image) {
    // Compute time in fractional years since the epoch.
    var days = ee.String(image.get('system:day_start'));
    //print('days',ee.Number.parse(days).multiply(2 * Math.PI));
    // var timeRadians = ee.Image(ee.Number.parse(days).divide(365).multiply(2 * Math.PI));
    var timeRadians = ee.Image(
      ee.Number(2*Math.PI).divide(365).multiply(ee.Number.parse(days))
    ).float().rename('t');
    return image.addBands(timeRadians);
  };
  
  var addHarmonics = function(freqs) {
    return function(image) {
      // Make an image of frequencies.
      var frequencies = ee.Image.constant(freqs);
      // This band should represent time in radians.
      var time = ee.Image(image).select('t');
      // Get the cosine terms.
      var cosines = time.multiply(frequencies).cos().rename(cosNames);
      // Get the sin terms.
      var sines = time.multiply(frequencies).sin().rename(sinNames);
      return image.addBands(cosines).addBands(sines);
    };
  };
  //print('s2_no_cld_shdw',s2_no_cld_shdw)
  var harmonicS2 = s2_no_cld_shdw
    .map(addConstant)
    .map(addTime)
    .map(addHarmonics(harmonicFrequencies));
    
  var harmonicNDVITrend = harmonicS2
    .select(independents.add(dependent_NDVI))
    .reduce(ee.Reducer.linearRegression(independents.length(), 1));
    
  var harmonicNDVITrendCoefficients = harmonicNDVITrend.select('coefficients')
    .arrayProject([0])
    .arrayFlatten([independents]);
  return harmonicNDVITrendCoefficients;
};
